name: Build and Publish to TestFlight

on:
  push:
    branches:
      - main

jobs:
  build-ios:
    runs-on: macos-latest
    timeout-minutes: 90 # Increase this timeout value as needed

    steps:

    - name: Disk Cleanup
      run: |
        xcode-select -p
        # find /Applications -maxdepth 1 -type d -name "Xcode*" ! -name "Xcode_15.4*.app" -exec sudo rm -rf {} +
        sudo du -sh /System/Volumes/Data/Applications/* 2>/dev/null
        sudo rm -rf /System/Volumes/Data/Users/runner/Library/Android/* || true
        sudo rm -rf /System/Volumes/Data/Users/runner/Library/Developer/CoreSimulator || true
        sudo du -sh /System/Volumes/Data/Users/runner/Library/* 2>/dev/null || true
        df -h

    - name: Checkout Code
      uses: actions/checkout@v3
      
    - name: Organize Source Dirs
      run: |
        rsync -av --exclude="src" --exclude=".git" $GITHUB_WORKSPACE/ src/

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Build Tools
      run: |
        brew install autoconf automake libtool tree rsync
        pip install Cython==3.0.0

    - name: Install Requirements and Build Kivy
      env:
        ACTIONS_STEP_DEBUG: false
      run: |
        pip install -r requirements.txt
        pip install kivy-ios
        toolchain build kivy

    - name: Import Code Signing Certificate
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_PRIVATE: ${{ secrets.APPLE_PRIVATE }}
      run: |
        # Decode and save certificate and private key
        echo "$APPLE_CERTIFICATE" | base64 --decode > ios_distribution.cer
        echo "$APPLE_PRIVATE" | base64 --decode > ios_private_key.pem

        # Create a temporary keychain
        security create-keychain -p temp-password build.keychain

        # Import certificate and private key into the keychain
        security import ios_distribution.cer -k build.keychain -T /usr/bin/codesign
        security import ios_private_key.pem -k build.keychain -T /usr/bin/codesign

        # Add the keychain to the search list and prioritize it
        security list-keychains -s build.keychain
        security default-keychain -s build.keychain

        # Set keychain settings to prevent automatic lock
        security set-keychain-settings -lut 7200 build.keychain

        # Unlock the keychain
        security unlock-keychain -p temp-password build.keychain

        # Allow codesign to access the signing identity without prompts
        security set-key-partition-list -S apple-tool:,apple: -s -k temp-password build.keychain

    - name: Install Provisioning Profile
      env:
        APPLE_PROFILE: ${{ secrets.APPLE_PROFILE }}
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$APPLE_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/myapp.mobileprovision
        ls -al ~/Library/MobileDevice/Provisioning\ Profiles/*
        security find-identity -p codesigning
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/myapp.mobileprovision

    - name: Install Fastlane
      run: |
        gem install fastlane
        fastlane match init
        fastlane run match type:appstore app_identifier:com.snslocation.electricians-now team_id:MNGTD992QD

    - name: Create App
      run: |
        toolchain create myapp src/
        echo "Directory structure after setup:"
        tree src/ -d

    - name: Build and Generate Xcode Project
      run: |
        toolchain update myapp-ios
        cd myapp-ios
        # tree -d

    - name: Add App Icons
      run: |
        cp src/Resources/AppIcon.appiconset/* myapp-ios/myapp/Images.xcassets/AppIcon.appiconset/

    - name: Build and Archive iOS App
      run: |
        cd myapp-ios
        df -h

        # Update deployment target in the Xcode project
        sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9]*\.[0-9]*/IPHONEOS_DEPLOYMENT_TARGET = 16.1/' myapp.xcodeproj/project.pbxproj
        # Update code signing
        sed -i '' '/CODE_SIGN_IDENTITY/c\
                          CODE_SIGN_STYLE = Manual;\
                          CODE_SIGN_IDENTITY="iPhone Distribution: SNS Location (MNGTD992QD)" ;\
                          PROVISIONING_PROFILE_SPECIFIER=17253cd9-c677-4796-ae9e-3fc912d68a58; \
                          DEVELOPMENT_TEAM=MNGTD992QD ;\
                          PRODUCT_BUNDLE_IDENTIFIER=com.snslocation.electricians-now;
        ' myapp.xcodeproj/project.pbxproj
        cat myapp.xcodeproj/project.pbxproj
        
        echo ------------------------------------------------------------------------------------
        xcodebuild -workspace myapp.xcodeproj/project.xcworkspace \
                   -scheme myapp \
                   -configuration Release \
                   -archivePath $PWD/build/myapp.xcarchive archive \
                   -destination "generic/platform=iOS" \
                   CODE_SIGN_IDENTITY="iPhone Distribution: SNS Location (MNGTD992QD)" \
                   PROVISIONING_PROFILE_SPECIFIER=17253cd9-c677-4796-ae9e-3fc912d68a58 \
                   DEVELOPMENT_TEAM=MNGTD992QD \
                   PRODUCT_BUNDLE_IDENTIFIER=com.snslocation.electricians-now \
                   INDEX_ENABLE=NO \
                   -allowProvisioningUpdates

    # Step 14: Build and Export using Fastlane
    - name: Build and Export App
      env:
        APP_STORE_API_KEY: ${{ secrets.APP_STORE_API_KEY }}
      run: |
        echo "$APP_STORE_API_KEY" | base64 --decode > api_key.json

        # Use Fastlane to build and export the app
        fastlane run build_app \
          workspace:myapp-ios/myapp.xcodeproj/project.xcworkspace \
          scheme:myapp-ios \
          export_method:app-store \
          export_team_id:MNGTD992QD \
          output_directory:myapp-ios/build \
          output_name:myapp.ipa

    # Step 15: Upload IPA Artifact
    - name: Upload IPA Artifact
      uses: actions/upload-artifact@v3
      with:
        name: myapp-ipa
        path: myapp-ios/build/myapp.ipa

    # Step 16: Upload to TestFlight
    - name: Upload to TestFlight
      env:
        APP_STORE_API_KEY: ${{ secrets.APP_STORE_API_KEY }}
      run: |
        fastlane pilot upload \
          --api_key_path api_key.json \
          --team_id MNGTD992QD \
          --ipa myapp-ios/build/myapp.ipa \
          --app_identifier com.snslocation.electricians-now

    # Step 17: Upload to App Store Connect
    - name: Upload to App Store Connect
      env:
        APP_STORE_API_KEY: ${{ secrets.APP_STORE_API_KEY }}
      run: |
        fastlane deliver \
          --api_key_path api_key.json \
          --app_identifier com.snslocation.electricians-now \
          --team_id MNGTD992QD \
          --ipa myapp-ios/build/myapp.ipa
