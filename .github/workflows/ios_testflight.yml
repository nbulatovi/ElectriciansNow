name: Build and Publish to TestFlight

on:
  push:
    branches:
      - main

jobs:
  build-ios:
    runs-on: macos-latest
    timeout-minutes: 300 # Increase this timeout value as needed

    steps:
    # Step 1: Checkout Code
    - name: Checkout code
      uses: actions/checkout@v3
      sudo du -sh /* 2>/dev/null
      exit 1
      
    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Step 3: Install Build Tools for Kivy-iOS
    - name: Install Build Tools
      run: |
        brew install autoconf automake libtool tree rsync
        pip install Cython==3.0.0

    # Step 4: Install Kivy and Kivy-iOS
    - name: Install Kivy
      env:
        ACTIONS_STEP_DEBUG: false
      run: |
        pip install kivy-ios
        toolchain build kivy

    # Step 5: Import Code Signing Certificate
    - name: Import Code Signing Certificate
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_PRIVATE: ${{ secrets.APPLE_PRIVATE }}
      run: |
        echo "$APPLE_CERTIFICATE" | base64 --decode > ios_distribution.cer
        echo "$APPLE_PRIVATE" | base64 --decode > ios_private_key.pem
        security create-keychain -p temp-password build.keychain
        security import ios_distribution.cer -k build.keychain -T /usr/bin/codesign
        security import ios_private_key.pem -k build.keychain -T /usr/bin/codesign
        security list-keychains -s build.keychain
        security unlock-keychain -p temp-password build.keychain

    # Step 6: Install Provisioning Profile
    - name: Install Provisioning Profile
      env:
        APPLE_PROFILE: ${{ secrets.APPLE_PROFILE }}
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$APPLE_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/myapp.mobileprovision
        ls -al ~/Library/MobileDevice/Provisioning\ Profiles/*
        security find-identity -p codesigning
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/myapp.mobileprovision

    # Step 9: Create app and copy source files
    - name: Create app and copy source files
      run: |
        toolchain create myapp .
        echo "kivy-ios Directory structure after setup:"
        # tree -d

    # Step 10: Build the App and Generate Xcode Project
    - name: Build and Generate Xcode Project
      run: |
        toolchain update myapp-ios
        cd myapp-ios
        # tree -d

    # Step 11: Copy App Icon Set into Xcode Project
    - name: Add App Icons
      run: |
        cp $GITHUB_WORKSPACE/Resources/AppIcon.appiconset/* myapp-ios/myapp/Images.xcassets/AppIcon.appiconset/

    # Step 12: Build and Archive iOS App
    - name: Build and Archive iOS App
      env:
        PROFILE_UUID: "d32433c2-c4e5-4c06-be04-421c96129209"
      run: |
        cd myapp-ios
        df -h

        # Update deployment target in the Xcode project
        sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9]*\.[0-9]*/IPHONEOS_DEPLOYMENT_TARGET = 16.1/' myapp.xcodeproj/project.pbxproj
        # Update code signing
        sed -i '' '/CODE_SIGN_IDENTITY/c\
                          CODE_SIGN_STYLE = Manual;\
                          CODE_SIGN_IDENTITY="iPhone Distribution: SNS Location (MNGTD992QD)" ;\
                          PROVISIONING_PROFILE_SPECIFIER=d32433c2-c4e5-4c06-be04-421c96129209; \
                          DEVELOPMENT_TEAM=MNGTD992QD ;\
                          PRODUCT_BUNDLE_IDENTIFIER=com.snslocation.electricians-now;
        ' myapp.xcodeproj/project.pbxproj
        cat myapp.xcodeproj/project.pbxproj
        
        echo ------------------------------------------------------------------------------------
        xcodebuild -workspace myapp.xcodeproj/project.xcworkspace \
                   -scheme myapp \
                   -configuration Release \
                   -archivePath $PWD/build/myapp.xcarchive archive \
                   -destination "generic/platform=iOS" \
                   CODE_SIGN_IDENTITY="iPhone Distribution: SNS Location (MNGTD992QD)" \
                   PROVISIONING_PROFILE_SPECIFIER=d32433c2-c4e5-4c06-be04-421c96129209 \
                   DEVELOPMENT_TEAM=MNGTD992QD \
                   PRODUCT_BUNDLE_IDENTIFIER=com.snslocation.electricians-now \
                   ONLY_ACTIVE_ARCH=YES \
                   INDEX_ENABLE=NO \
                   -allowProvisioningUpdates -quiet
        echo ------------------------------------------------------------------------------------
        xcodebuild -exportArchive \
                   -archivePath $PWD/build/myapp.xcarchive \
                   -exportOptionsPlist $GITHUB_WORKSPACE/ExportOptions.plist \
                   -exportPath $PWD/build \
                   -destination "generic/platform=iOS" \
                   CODE_SIGN_IDENTITY="iPhone Distribution: SNS Location (MNGTD992QD)" \
                   PROVISIONING_PROFILE_SPECIFIER=d32433c2-c4e5-4c06-be04-421c96129209 \
                   DEVELOPMENT_TEAM=MNGTD992QD \
                   PRODUCT_BUNDLE_IDENTIFIER=com.snslocation.electricians-now \
                   -allowProvisioningUpdates -quiet
      
    - name: Handle failure
      if: always()
      run: |
        echo "The previous step failed. Handling failure."
        df -h

    # Step 13: Install Fastlane
    - name: Install Fastlane
      run: |
        gem install fastlane

    # Step 14: Upload to TestFlight
    - name: Upload to TestFlight
      env:
        APP_STORE_API_KEY: ${{ secrets.APP_STORE_API_KEY }}
      run: |
        echo "$APP_STORE_API_KEY" | base64 --decode > api_key.json
        fastlane pilot upload --api_key_path api_key.json --team_id MNGTD992QD --ipa myapp-ios/build/myapp.ipa --app_identifier com.snslocation.electricians-now

    # Step 15: Upload IPA Artifact
    - name: Upload IPA Artifact
      uses: actions/upload-artifact@v3
      with:
        name: myapp-ipa
        path: myapp-ios/build/myapp.ipa

    # Step 16: Upload to App Store
    - name: Upload to App Store
      env:
        APP_STORE_API_KEY: ${{ secrets.APP_STORE_API_KEY }}
      run: |
        echo "$APP_STORE_API_KEY" | base64 --decode > api_key.json
        fastlane deliver --api_key_path api_key.json --app_identifier com.snslocation.electricians-now --team_id MNGTD992QD --ipa myapp-ios/build/myapp.ipa
