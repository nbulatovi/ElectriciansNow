name: Build and Publish to TestFlight

on:
  push:
    branches:
      - main

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Build Tools for Kivy-iOS
      run: |
        brew update
        brew install autoconf automake libtool pkg-config

    # Step 3: Install Kivy and Kivy-iOS
    - name: Install dependencies
      run: |
        pip install kivy==2.3.0
        pip install kivy-ios

    # Step 4: Import Code Signing Certificate
    - name: Import Code Signing Certificate
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_PRIVATE: ${{ secrets.APPLE_PRIVATE }}
      run: |
        echo "$APPLE_CERTIFICATE" | base64 --decode > ios_distribution.cer
        echo "$APPLE_PRIVATE" | base64 --decode > ios_private_key.pem
        security create-keychain -p temp-password build.keychain
        security import ios_distribution.cer -k build.keychain -T /usr/bin/codesign
        security import ios_private_key.pem -k build.keychain -T /usr/bin/codesign
        security list-keychains -s build.keychain
        security unlock-keychain -p temp-password build.keychain

    # Step 5: Install Provisioning Profile
    - name: Install Provisioning Profile
      env:
        APPLE_PROFILE: ${{ secrets.APPLE_PROFILE }}
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$APPLE_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/myapp.mobileprovision

    # Step 4: Cache Kivy-iOS Build Artifacts
    - name: Cache Kivy-iOS Build
      id: cache-kivy
      uses: actions/cache@v3
      with:
        path: |
          kivy-ios/build
          kivy-ios/dist
        key: kivy-ios-${{ runner.os }}-${{ hashFiles('**/toolchain.py') }}
        restore-keys: |
          kivy-ios-${{ runner.os }}

    # Step 5: Clone and Build Kivy-iOS if Cache Missed
    - name: Build Kivy-iOS
      if: steps.cache-kivy.outputs.cache-hit != 'true'
      run: |
        if [ ! -d "kivy-ios" ]; then
          git clone https://github.com/kivy/kivy-ios.git
        fi
        cd kivy-ios
        python3 toolchain.py build kivy

    # Step 6: Build the iOS Project
    - name: Build Kivy iOS Project
      run: |
        # Clone Kivy-iOS if it doesn't exist
        if [ ! -d "kivy-ios" ]; then
          git clone https://github.com/kivy/kivy-ios.git
        fi

        cd kivy-ios

        # Create the app directory and copy app source files
        python3 toolchain.py create myapp $GITHUB_WORKSPACE
        mkdir -p apps/myapp  # Ensure the target folder exists
        cp -r $GITHUB_WORKSPACE/* apps/myapp/

        # Verify app folder structure
        tree

        # Build the app and generate Xcode project
        python3 toolchain.py build myapp
        python3 toolchain.py xcode myapp

    # Copy App Icon Set into Xcode Project
    - name: Add App Icons
      run: |
        cp -R $GITHUB_WORKSPACE/Resources/AppIcon.appiconset \
              kivy-ios/apps/myapp/Images.xcassets/AppIcon.appiconset
              
    # Step 7: Build and Sign IPA
    - name: Build and Archive iOS App
      run: |
        cd kivy-ios
        xcodebuild -workspace myapp.xcodeproj/project.xcworkspace \
                   -scheme myapp \
                   -configuration Release \
                   -archivePath $PWD/build/myapp.xcarchive archive
        xcodebuild -exportArchive \
                   -archivePath $PWD/build/myapp.xcarchive \
                   -exportOptionsPlist $GITHUB_WORKSPACE/ExportOptions.plist \
                   -exportPath $PWD/build

    # Step 8: Install Fastlane
    - name: Install Fastlane
      run: |
        gem install fastlane

    # Step 9: Upload to TestFlight
    - name: Upload to TestFlight
      env:
        APP_STORE_API_KEY: ${{ secrets.APP_STORE_API_KEY }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
        BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
      run: |
        echo "$APP_STORE_API_KEY" | base64 --decode > api_key.json
        fastlane pilot upload --api_key_path api_key.json --team_id $TEAM_ID --ipa kivy-ios/build/myapp.ipa --app_identifier $BUNDLE_ID

    # Step 10: Upload IPA Artifact
    - name: Upload IPA Artifact
      uses: actions/upload-artifact@v3
      with:
        name: myapp-ipa
        path: kivy-ios/build/myapp.ipa
