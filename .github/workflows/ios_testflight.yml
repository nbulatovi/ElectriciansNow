name: Build and Publish to TestFlight

on:
  push:
    branches:
      - main

jobs:
  build-ios:
    runs-on: macos-latest
    timeout-minutes: 90 # Increase this timeout value as needed

    steps:

    ############################################################################
    - name: Disk Cleanup
      run: |
        xcode-select -p
        # find /Applications -maxdepth 1 -type d -name "Xcode*" ! -name "Xcode_15.4*.app" -exec sudo rm -rf {} +
        # sudo du -sh /System/Volumes/Data/Applications/* 2>/dev/null
        # sudo rm -rf /System/Volumes/Data/Users/runner/Library/Android/* || true
        # sudo rm -rf /System/Volumes/Data/Users/runner/Library/Developer/CoreSimulator || true
        # sudo du -sh /System/Volumes/Data/Users/runner/Library/* 2>/dev/null || true
        df -h

    ############################################################################
    - name: Checkout Code
      uses: actions/checkout@v3
      
    ############################################################################
    - name: Organize Source Dirs
      run: |
        mkdir -p src/
        rsync -av --exclude="src" --exclude=".git" $GITHUB_WORKSPACE/ src/

    ############################################################################
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    ############################################################################
    - name: Install Build Tools
      run: |
        brew install autoconf automake libtool tree rsync
        pip install Cython==3.0.0
        pip install -r requirements.txt

    ############################################################################
    - name: Import Code Signing Certificate
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_PRIVATE: ${{ secrets.APPLE_PRIVATE }}
      run: |

        # Decode and save certificate and private key
        echo "$APPLE_CERTIFICATE" | base64 --decode > ios_distribution.cer
        echo "$APPLE_PRIVATE" | base64 --decode > ios_private_key.pem

        # Create a temporary keychain
        security create-keychain -p temp-password build.keychain

        # Import certificate and private key into the keychain
        security import ios_distribution.cer -k build.keychain -T /usr/bin/codesign
        security import ios_private_key.pem -k build.keychain -T /usr/bin/codesign

        # Add the keychain to the search list and prioritize it
        security list-keychains -s build.keychain
        security default-keychain -s build.keychain

        # Set keychain settings to prevent automatic lock
        security set-keychain-settings -lut 7200 build.keychain

        # Unlock the keychain
        security unlock-keychain -p temp-password build.keychain

        # Allow codesign to access the signing identity without prompts
        security set-key-partition-list -S apple-tool:,apple: -s -k temp-password build.keychain

    ############################################################################
    - name: Fastlane Match
      env:
        APP_STORE_API_KEY: ${{ secrets.APP_STORE_API_KEY }}
        API_KEY_P8: ${{ secrets.API_KEY_P8 }}
        FASTLANE_USER: ${{ secrets.APPLE_USER }}
        FASTLANE_PASSWORD: ${{ secrets.APPLE_PASS }}
        MATCH_PASSWORD: ${{ secrets.APPLE_PASS }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gem install fastlane
        echo "$APP_STORE_API_KEY" | base64 --decode > api_key.json
        echo "$API_KEY_P8" | base64 --decode > api_key.p8
        fastlane run match --verbose

    ############################################################################
    - name: Kivy Install
      env:
        ACTIONS_STEP_DEBUG: false
      run: |
        pip install kivy-ios
        toolchain build kivy

    ############################################################################
    - name: Create App
      run: |
        toolchain create myapp src/ 
        cd myapp-ios
        tree -a
        grep -r -A 3 -B 3 "org.kivy.myapp" .
        sed -i '' 's/org\.kivy\.myapp/com.snslocation.electricians-now/g' myapp-Info.plist

    ############################################################################
    - name: Build and Generate Xcode Project
      run: |
        toolchain update myapp-ios

    ############################################################################
    - name: Add App Icons
      run: |
        cp src/Resources/AppIcon.appiconset/* myapp-ios/myapp/Images.xcassets/AppIcon.appiconset/

    ############################################################################
    - name: Fastlane Build and Export App
      env:
        FASTLANE_TEAM_ID: MNGTD992QD
        FASTLANE_USER: ${{ secrets.APPLE_USER }}
        FASTLANE_PASSWORD: ${{ secrets.APPLE_PASS }}
      run: |

        # Update deployment target in the Xcode project
        sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9]*\.[0-9]*/IPHONEOS_DEPLOYMENT_TARGET = 16.1/' myapp-ios/myapp.xcodeproj/project.pbxproj

        sed -i '' '/CODE_SIGN_IDENTITY/c\
                    CODE_SIGN_STYLE = Manual;\
                    DEVELOPMENT_TEAM = MNGTD992QD;\
                    PRODUCT_BUNDLE_IDENTIFIER = com.snslocation.electricians-now;'

        # Login
        xcrun altool --list-providers -u "$FASTLANE_USER" -p "$FASTLANE_PASSWORD"

        # Use Fastlane to build and export the app
        fastlane gym
        
    ############################################################################
    - name: IPA Artifact Upload
      uses: actions/upload-artifact@v3
      with:
        name: myapp-ipa
        path: myapp-ios/build/myapp.ipa

    ############################################################################
    - name: TestFlight Upload
      env:
        FASTLANE_TEAM_ID: MNGTD992QD
        FASTLANE_USER: ${{ secrets.APPLE_USER }}
        FASTLANE_PASSWORD: ${{ secrets.APPLE_PASS }}
      run: |
        fastlane snapshot
        fastlane frameit gold
        fastlane pilot upload \
          --api_key_path api_key.json \
          --ipa myapp-ios/build/myapp.ipa

    ############################################################################
    - name: App Store Connect Upload
      env:
        FASTLANE_TEAM_ID: MNGTD992QD
        FASTLANE_USER: ${{ secrets.APPLE_USER }}
        FASTLANE_PASSWORD: ${{ secrets.APPLE_PASS }}
      run: |
        fastlane deliver \
          --api_key_path api_key.json \
          --ipa myapp-ios/build/myapp.ipa
